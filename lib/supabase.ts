import { createClient } from "@supabase/supabase-js"

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

// –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç Supabase
export const supabase = createClient(supabaseUrl, supabaseAnonKey)

// –¢–∏–ø–∏ –¥–ª—è –Ω–∞—à–∏—Ö —Ç–∞–±–ª–∏—Ü—å
export interface User {
  id: string
  email: string
  phone: string
  name: string
  surname: string
  address?: string
  created_at: string
  updated_at: string
}

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
export const userService = {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
  async checkUserByPhone(phone: string): Promise<User | null> {
    try {
      const { data, error } = await supabase.from("users").select("*").eq("phone", phone).single()

      if (error && error.code !== "PGRST116") {
        console.error("Error checking user by phone:", error)
        return null
      }

      return data
    } catch (error) {
      console.error("Error checking user by phone:", error)
      return null
    }
  },

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ email
  async checkUserByEmail(email: string): Promise<User | null> {
    try {
      const { data, error } = await supabase.from("users").select("*").eq("email", email).single()

      if (error && error.code !== "PGRST116") {
        console.error("Error checking user by email:", error)
        return null
      }

      return data
    } catch (error) {
      console.error("Error checking user by email:", error)
      return null
    }
  },

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ email
  async checkPhoneAndEmailMatch(phone: string, email: string): Promise<boolean> {
    try {
      const { data, error } = await supabase.from("users").select("id").eq("phone", phone).eq("email", email).single()

      if (error && error.code !== "PGRST116") {
        console.error("Error checking phone and email match:", error)
        return false
      }

      return !!data
    } catch (error) {
      console.error("Error checking phone and email match:", error)
      return false
    }
  },

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ users)
  async createUser(user: any) {
    const { data, error } = await supabase.from('users').insert([user]).select().single();
    if (error) return null;
    return data; // data –º—ñ—Å—Ç–∏—Ç—å id, surname —Ç–∞ —ñ–Ω—à—ñ –ø–æ–ª—è
  },

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  async updatePassword(userId: string): Promise<boolean> {
    try {
      const { error } = await supabase
        .from("users")
        .update({
          updated_at: new Date().toISOString(),
        })
        .eq("id", userId)

      if (error) {
        console.error("Error updating user record:", error)
        return false
      }

      return true
    } catch (error) {
      console.error("Error updating password:", error)
      return false
    }
  },

  // üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  async updateUser(userData: {
    id: string
    phone: string
    name: string
    surname: string
    email: string
  }): Promise<{ error: any }> {
    try {
      const { error } = await supabase
        .from("users")
        .update({
          phone: userData.phone,
          name: userData.name,
          surname: userData.surname,
          email: userData.email,
          updated_at: new Date().toISOString(),
        })
        .eq("id", userData.id)

      return { error }
    } catch (error) {
      console.error("Error updating user:", error)
      return { error }
    }
  },
}

export default supabase
